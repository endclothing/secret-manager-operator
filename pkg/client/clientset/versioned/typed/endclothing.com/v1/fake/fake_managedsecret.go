// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	endclothingcomv1 "github.com/endclothing/secret-manager-operator/pkg/apis/endclothing.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeManagedSecrets implements ManagedSecretInterface
type FakeManagedSecrets struct {
	Fake *FakeComV1
	ns   string
}

var managedsecretsResource = schema.GroupVersionResource{Group: "com.endclothing", Version: "v1", Resource: "managedsecrets"}

var managedsecretsKind = schema.GroupVersionKind{Group: "com.endclothing", Version: "v1", Kind: "ManagedSecret"}

// Get takes name of the managedSecret, and returns the corresponding managedSecret object, and an error if there is any.
func (c *FakeManagedSecrets) Get(name string, options v1.GetOptions) (result *endclothingcomv1.ManagedSecret, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(managedsecretsResource, c.ns, name), &endclothingcomv1.ManagedSecret{})

	if obj == nil {
		return nil, err
	}
	return obj.(*endclothingcomv1.ManagedSecret), err
}

// List takes label and field selectors, and returns the list of ManagedSecrets that match those selectors.
func (c *FakeManagedSecrets) List(opts v1.ListOptions) (result *endclothingcomv1.ManagedSecretList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(managedsecretsResource, managedsecretsKind, c.ns, opts), &endclothingcomv1.ManagedSecretList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &endclothingcomv1.ManagedSecretList{ListMeta: obj.(*endclothingcomv1.ManagedSecretList).ListMeta}
	for _, item := range obj.(*endclothingcomv1.ManagedSecretList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested managedSecrets.
func (c *FakeManagedSecrets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(managedsecretsResource, c.ns, opts))

}

// Create takes the representation of a managedSecret and creates it.  Returns the server's representation of the managedSecret, and an error, if there is any.
func (c *FakeManagedSecrets) Create(managedSecret *endclothingcomv1.ManagedSecret) (result *endclothingcomv1.ManagedSecret, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(managedsecretsResource, c.ns, managedSecret), &endclothingcomv1.ManagedSecret{})

	if obj == nil {
		return nil, err
	}
	return obj.(*endclothingcomv1.ManagedSecret), err
}

// Update takes the representation of a managedSecret and updates it. Returns the server's representation of the managedSecret, and an error, if there is any.
func (c *FakeManagedSecrets) Update(managedSecret *endclothingcomv1.ManagedSecret) (result *endclothingcomv1.ManagedSecret, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(managedsecretsResource, c.ns, managedSecret), &endclothingcomv1.ManagedSecret{})

	if obj == nil {
		return nil, err
	}
	return obj.(*endclothingcomv1.ManagedSecret), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeManagedSecrets) UpdateStatus(managedSecret *endclothingcomv1.ManagedSecret) (*endclothingcomv1.ManagedSecret, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(managedsecretsResource, "status", c.ns, managedSecret), &endclothingcomv1.ManagedSecret{})

	if obj == nil {
		return nil, err
	}
	return obj.(*endclothingcomv1.ManagedSecret), err
}

// Delete takes name of the managedSecret and deletes it. Returns an error if one occurs.
func (c *FakeManagedSecrets) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(managedsecretsResource, c.ns, name), &endclothingcomv1.ManagedSecret{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeManagedSecrets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(managedsecretsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &endclothingcomv1.ManagedSecretList{})
	return err
}

// Patch applies the patch and returns the patched managedSecret.
func (c *FakeManagedSecrets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *endclothingcomv1.ManagedSecret, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(managedsecretsResource, c.ns, name, pt, data, subresources...), &endclothingcomv1.ManagedSecret{})

	if obj == nil {
		return nil, err
	}
	return obj.(*endclothingcomv1.ManagedSecret), err
}
